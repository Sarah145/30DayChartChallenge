timepoint == 'TRT' ~ 'TRT (ex vivo)',
str_detect(timepoint, 'D[1-9]') ~ 'TRT (in vivo)',
timepoint == 'R' ~ 'Relapse',
timepoint == 'nan' ~ 'Healthy',
timepoint == 'D0' ~ 'Diagnosis'
))
timepoint_cols <- c(Healthy = '#D7F2BA', Diagnosis = '#FFC15E', `TRT (ex vivo)` = '#97DFFC',
`TRT (in vivo)` = '#A188A6', Relapse = '#FF6B6B')
df$timepoint1 <- factor(df$timepoint1, levels = names(timepoint_cols))
p4 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=timepoint1)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = timepoint_cols, name = 'Timepoint') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
png('~/Documents/Project/pics/surgery_wo_TRT_by_dataset.png', height = 800, width = 1200)
p1 + p2 + p3 + p4  + plot_layout(nrow = 2, guides = 'collect')
dev.off()
df <- read.csv('~/Documents/Project/data/petti_AML_umap.csv', sep ='\t')
df$celltype <- factor(df$celltype, levels = names(cell_cols))
df$sample <- factor(df$sample)
p1 <- ggplot(df, aes(x=umap1, y=umap2, col=sample)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = PNWColors::pnw_palette('Sunset2', 5), name = 'Dataset') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
p1 <- ggplot(df, aes(x=umap1, y=umap2, col=sample)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = PNWColors::pnw_palette('Sunset2', 5), name = 'Donor') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(df, aes(x=umap1, y=umap2, col=celltype)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = cell_cols, name = 'Cell type') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
p1 + p2
dev.off()
p1 + p2
png('~/Documents/Project/pics/petti_AML.png', height = 800, width = 600)
p1 / p2
dev.off()
p1 <- ggplot(df, aes(x=umap1, y=umap2, col=sample)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = PNWColors::pnw_palette('Sunset2', 5), name = 'Donor') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 17) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(df, aes(x=umap1, y=umap2, col=celltype)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = cell_cols, name = 'Cell type') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 17) +
theme(plot.title = element_text(hjust = 0.5))
png('~/Documents/Project/pics/petti_AML.png', height = 800, width = 500)
p1 / p2
dev.off()
df <- read.csv('~/Documents/Project/data/surgery_w_TRT_umaps.csv', sep ='\t')
a <- subset(df, !is.na(df$timepoint))
nrow(a)
nrow(df)
a <- subset(df, df$timepoint != 'nan')
nrow(a)
length(unique(a$donor))
length(unique(a$sample))
nrow(df)
df <- read.csv('~/Documents/Project/data/petti_AML_umap.csv', sep ='\t')
df %>% filter(celltype == 'CD4.M') %>% group_by(sample) %>% tally()
df <- read.csv('~/Documents/Project/data/surgery_w_TRT_umaps.csv', sep ='\t')
df$celltype <- factor(df$celltype, levels = names(cell_cols))
df$dataset <- factor(df$dataset, levels = c('granja', 'oetjen', 'vanG', 'petti', 'nuig'))
p1 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=dataset)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
labs(title = 'By dataset') +
scale_color_manual(values = PNWColors::pnw_palette('Sunset2', 5), name = 'Dataset') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=donor)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_sugarpill(name = 'Donor') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1), ncol = 4)) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
p3 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=celltype)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = cell_cols, name = 'Celltype') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
df <- df %>% mutate(timepoint1 = case_when(
timepoint == 'TRT' ~ 'TRT (ex vivo)',
str_detect(timepoint, 'D[1-9]') ~ 'TRT (in vivo)',
timepoint == 'R' ~ 'Relapse',
timepoint == 'nan' ~ 'Healthy',
timepoint == 'D0' ~ 'Diagnosis'
))
df$timepoint1 <- factor(df$timepoint1, levels = names(timepoint_cols))
p4 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=timepoint1)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = timepoint_cols, name = 'Timepoint') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
png('~/Documents/Project/pics/surgery_w_TRT_by_dataset.png', height = 800, width = 1200)
p1 + p2 + p3 + p4  + plot_layout(nrow = 2, guides = 'collect')
dev.off()
p1 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=dataset)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
#labs(title = 'By dataset') +
scale_color_manual(values = PNWColors::pnw_palette('Sunset2', 5), name = 'Dataset') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=donor)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_sugarpill(name = 'Donor') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1), ncol = 4)) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
p3 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=celltype)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = cell_cols, name = 'Celltype') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
df <- df %>% mutate(timepoint1 = case_when(
timepoint == 'TRT' ~ 'TRT (ex vivo)',
str_detect(timepoint, 'D[1-9]') ~ 'TRT (in vivo)',
timepoint == 'R' ~ 'Relapse',
timepoint == 'nan' ~ 'Healthy',
timepoint == 'D0' ~ 'Diagnosis'
))
df$timepoint1 <- factor(df$timepoint1, levels = names(timepoint_cols))
p4 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=timepoint1)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = timepoint_cols, name = 'Timepoint') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
png('~/Documents/Project/pics/surgery_w_TRT_by_dataset.png', height = 800, width = 1200)
p1 + p2 + p3 + p4  + plot_layout(nrow = 2, guides = 'collect')
dev.off()
df <- read.csv('~/Documents/Project/data/surgery_w_TRT_umaps.csv', sep ='\t')
df$celltype <- factor(df$celltype, levels = names(cell_cols))
df$dataset <- factor(df$dataset, levels = c('granja', 'oetjen', 'vanG', 'petti', 'nuig'))
p1 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=dataset)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
#labs(title = 'By dataset') +
scale_color_manual(values = PNWColors::pnw_palette('Sunset2', 5), name = 'Dataset') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=donor)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_sugarpill(name = 'Donor') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1), ncol = 4)) +
theme_void(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5))
p3 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=celltype)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = cell_cols, name = 'Celltype') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5))
df <- df %>% mutate(timepoint1 = case_when(
timepoint == 'TRT' ~ 'TRT (ex vivo)',
str_detect(timepoint, 'D[1-9]') ~ 'TRT (in vivo)',
timepoint == 'R' ~ 'Relapse',
timepoint == 'nan' ~ 'Healthy',
timepoint == 'D0' ~ 'Diagnosis'
))
df$timepoint1 <- factor(df$timepoint1, levels = names(timepoint_cols))
p4 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=timepoint1)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = timepoint_cols, name = 'Timepoint') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5))
png('~/Documents/Project/pics/surgery_w_TRT_by_dataset.png', height = 800, width = 1300)
p1 + p2 + p3 + p4  + plot_layout(nrow = 2, guides = 'collect')
dev.off()
df <- read.csv('~/Documents/Project/data/surgery_wo_TRT_umaps.csv', sep ='\t')
df$celltype <- factor(df$celltype, levels = names(cell_cols))
df$dataset <- factor(df$dataset, levels = c('granja', 'oetjen', 'vanG', 'petti', 'nuig'))
p1<-ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=dataset)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
#labs(title = 'By dataset') +
scale_color_manual(values = PNWColors::pnw_palette('Sunset2', 5), name = 'Dataset') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=donor)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_sugarpill(name = 'Donor') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1), ncol = 4)) +
theme_void(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5))
p3 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=celltype)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = cell_cols, name = 'Celltype') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5))
df <- df %>% mutate(timepoint1 = case_when(
timepoint == 'TRT' ~ 'TRT (ex vivo)',
str_detect(timepoint, 'D[1-9]') ~ 'TRT (in vivo)',
timepoint == 'R' ~ 'Relapse',
timepoint == 'nan' ~ 'Healthy',
timepoint == 'D0' ~ 'Diagnosis'
))
timepoint_cols <- c(Healthy = '#D7F2BA', Diagnosis = '#FFC15E', `TRT (ex vivo)` = '#97DFFC',
`TRT (in vivo)` = '#A188A6', Relapse = '#FF6B6B')
df$timepoint1 <- factor(df$timepoint1, levels = names(timepoint_cols))
p4 <- ggplot(df, aes(x=dataset_umap1, y=dataset_umap2, col=timepoint1)) +
geom_point(show.legend = T, size = 0.01, alpha = 0.5) +
scale_color_manual(values = timepoint_cols, name = 'Timepoint') +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
theme_void(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5))
png('~/Documents/Project/pics/surgery_wo_TRT_by_dataset.png', height = 800, width = 1300)
p1 + p2 + p3 + p4  + plot_layout(nrow = 2, guides = 'collect')
dev.off()
132401-124643
install.packages('rgbif')
library(rgbif)
elevation(latitude = 53.267876, longitude = -9.088812)
install.packages('elevatr')
install.packages(googleway)
install.packages('googleway')
install.packages('jqr')
install.packages('googleway')
library(googleway)
api_key <- 'AIzaSyDAZHlUYCAvGtquvqVbitOFAAOsyJXerns'
df_locations <- data.frame(lat = c(54.481084), lon = c(-3.220625))
google_elevation(df_locations = df_locations, key = api_key)
google_elevation(df_locations = df_locations, key = api_key)
api_key <- 'AIzaSyDAZHlUYCAvGtquvqVbitOFAAOsyJXerns'
google_elevation(df_locations = df_locations, key = api_key)
google_elevation(df_locations = df_locations, key = api_key)
library(geosphere)
install.packages('geosphere')
library(geosphere)
dat <- read.csv('~/Downloads/Map - Apr 7 03_31 PM.csv')
head(dat)
df %>%
rowwise() %>%
mutate(newcolumn_distance = distHaversine(c(dat$Longitude, dat$Latitude),
c(dat$Longitude, dat$Latitude)))
distHaversine(c(dat$Longitude[1], dat$Latitude[1]), c(dat$Longitude[2], dat$Latitude[2]))
nrow(dat)
distHaversine(c(dat$Longitude[1], dat$Latitude[1]), c(dat$Longitude[314], dat$Latitude[314]))
?distHaversine
c(dat$Longitude[1], dat$Latitude[1])
c(dat$Longitude[2], dat$Latitude[2])
distHaversine(c(dat$Longitude[1], dat$Latitude[1]), c(dat$Longitude[2], dat$Latitude[2]))
dist <- c(0)
for(i in 1:nrow(dat)-1){
dist <- c(0)
for(i in 1:nrow(dat)-1){
dist <- c(dist, distHaversine(c(dat$Longitude[i], dat$Latitude[i]),
c(dat$Longitude[i+1], dat$Latitude[i+1])))
}
dist <- c(0)
for(i in 1:nrow(dat)-1){
print(i)
dist <- c(dist, distHaversine(c(dat$Longitude[i], dat$Latitude[i]),
c(dat$Longitude[i+1], dat$Latitude[i+1])))
}
dist <- c(0)
for(i in 1:(nrow(dat)-1)){
#  print(i)
dist <- c(dist, distHaversine(c(dat$Longitude[i], dat$Latitude[i]),
c(dat$Longitude[i+1], dat$Latitude[i+1])))
}
dat$dist_from_previous <- dist
head(cumsum(dat$dist_from_previous))
dat$dist_from_home <- cumsum(dist)
tail(dat)
for(i in 1:1024) {
hc = HilbertCurve(1, 1024, level = 5, reference = TRUE, arrow = FALSE)
hc_points(hc, x1 = i, np = NULL, pch = 16, size = unit(2, "mm"))
}
library(HilbertCurve)
for(i in 1:1024) {
hc = HilbertCurve(1, 1024, level = 5, reference = TRUE, arrow = FALSE)
hc_points(hc, x1 = i, np = NULL, pch = 16, size = unit(2, "mm"))
}
hc = HilbertCurve(1, 1024, level = 5, reference = TRUE, arrow = FALSE)
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 5, reference = TRUE, arrow = FALSE)
library(IRanges)
x = sort(sample(100, 20))
s = x[1:10*2 - 1]
e = x[1:10*2]
ir = IRanges(s, e)
ir
ir <- IRanges(s = dat$dist_from_home, width = dat$dist_from_previous)
ir
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 5, reference = TRUE, arrow = FALSE)
hc_segments(hc, ir, gp = gpar(lwd = 5))
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 5, reference = TRUE, arrow = T)
hc_segments(hc, ir, gp = gpar(lwd = 5))
ir <- IRanges(start = dat$dist_from_home[1:(nrow(dat)-1)], end = dat$dist_from_home[2:nrow(dat)])
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 5, reference = TRUE, arrow = T)
hc_segments(hc, ir, gp = gpar(lwd = 5))
pal2 <- colorRampPalette(c("#581386", "#B63679FF", "#FB8861FF","#FB8861FF","#FB8861FF", "#FB8861FF", "#FB8861FF", "#FCFDBFFF", "#FCFDBFFF","#FCFDBFFF","#FCFDBFFF", "#FCFDBFFF"))
dat$Elevation_norm <- (dat$Elevation/max(dat$Elevation))*100
cols <- pal2(100)
col <- cols[dat$Elevation_norm]
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 5, reference = TRUE, arrow = T)
hc_segments(hc, ir, gp = gpar(lwd = 3, col = col))
library(cowplot)
df <- data.frame(x = dat$Elevation_norm)
p <- ggplot(df, aes(x = x, y= 1, col = x)) +
geom_point() +
scale_color_gradientn(colors = pal2(100), name = 'Density of \nvariants') +
theme(legend.text = element_text(color = 'white'),
legend.title = element_text(color = "white"),
legend.background = element_rect(fill = "black"))
legd <- get_legend(p)
legd
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 5, reference = TRUE, arrow = T, legend = legd)
pal2 <- colorRampPalette(c("#581386", "#B63679FF", "#FB8861FF", "#FCFDBFFF"))
cols <- pal2(100)
col <- cols[dat$Elevation_norm]
p <- ggplot(df, aes(x = x, y= 1, col = x)) +
geom_point() +
scale_color_gradientn(colors = pal2(100), name = 'Elevation') +
theme(legend.text = element_text(color = 'white'),
legend.title = element_text(color = "white"),
legend.background = element_rect(fill = "black"))
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 5, reference = TRUE, arrow = T, legend = legd)
hc_segments(hc, ir, gp = gpar(lwd = 3, col = col))
legd <- get_legend(p)
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 5, reference = TRUE, arrow = T, legend = legd)
hc_segments(hc, ir, gp = gpar(lwd = 3, col = col))
plot(dat$dist_from_home, dat$Elevation)
plot(dat$dist_from_home, dat$Elevation_norm)
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 6, reference = TRUE, arrow = T, legend = legd)
hc_segments(hc, ir, gp = gpar(lwd = 3, col = col))
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 6, reference = TRUE, arrow = F, legend = legd)
hc_segments(hc, ir, gp = gpar(lwd = 3, col = col))
?HilbertCurve
pal2 <- colorRampPalette(c("#B63679FF", "#FB8861FF", "#FCFDBFFF"))
cols <- pal2(100)
col <- cols[dat$Elevation_norm]
p <- ggplot(df, aes(x = x, y= 1, col = x)) +
geom_point() +
scale_color_gradientn(colors = pal2(100), name = 'Elevation') +
theme(legend.text = element_text(color = 'white'),
legend.title = element_text(color = "white"),
legend.background = element_rect(fill = "black"))
legd <- get_legend(p)
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 6, reference = TRUE, arrow = F, legend = legd)
hc_segments(hc, ir, gp = gpar(lwd = 3, col = col))
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 4, reference = TRUE, arrow = F, legend = legd)
hc_segments(hc, ir, gp = gpar(lwd = 3, col = col))
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 4, reference = TRUE, arrow = F, legend = legd, start_from = 'topleft', first_seg = 'vertical')
hc_segments(hc, ir, gp = gpar(lwd = 3, col = col))
p <- ggplot(df, aes(x = x, y= 1, col = x)) +
geom_point() +
scale_color_gradientn(colors = pal2(100), name = 'Elevation', breaks = seq(0, 100, 25), labels = quantile(dat$Elevation, seq(0,1,.25))) +
theme(legend.text = element_text(color = 'white'),
legend.title = element_text(color = "white"),
legend.background = element_rect(fill = "black"))
legd <- get_legend(p)
hc = HilbertCurve(min(dat$dist_from_home), max(dat$dist_from_home), level = 4, reference = TRUE, arrow = F, legend = legd, start_from = 'topleft', first_seg = 'vertical')
hc_segments(hc, ir, gp = gpar(lwd = 3, col = col))
library(tidyverse)
library(rtweet)
library(ggtext)
sysfonts::font_add_google('Playfair Display')
sysfonts::font_add_google('Montserrat')
showtext::showtext_auto()
showtext::showtext_opts(dpi = 300)
tweets <- get_timeline(user = 'dog_rates', n=4000)
tweets <- tweets %>% filter(is_retweet == F)
ratings <- tweets %>% filter(str_detect(text, '[0-9]+/10')) %>%
mutate(rating = str_extract(text, '[0-9]+/10'),
num_rating = as.numeric(str_extract(rating, '[^/]+')))
ratings <- ratings %>% filter(status_id != '1280674673684955136')
label_df <- data.frame(x = c(0, 10, 15),
y = c(45, 200, 50),
label = c('Lowest rating - 0/10 for this robodog',
'The most common rating is 13/10',
'Rusty was one of 15 dogs to achieve 15/10'))
img_df <- data.frame(x = c(0, 15), y = c(100, 110),
label = c('<img src="robodog.jpeg" width="150"/>',
'<img src="rusty.jpeg" width="130"/>'))
ggplot(ratings, aes(x = num_rating)) +
geom_bar(fill = '#4CE0B3', col = '#AD343E', size = 1, alpha = 0.5) +
geom_label(data = label_df, aes(x = x, y = y, label = str_wrap(label, width = 15)),
col = '#AD343E', family = 'Montserrat', size = 7, label.size = NA, fill = alpha('white', 0.6)) +
geom_curve(aes(x = 10, xend = 12.5, y = 215, yend = 250), curvature = -0.25, size = 0.5, colour = "#AD343E", arrow = arrow(length = unit(0.025, "npc"))) +
geom_richtext(data = img_df, aes(x = x, y = y, label = label), fill = NA, label.color = NA) +
scale_x_continuous(breaks = seq(0, 15), limits = c(-1, 16)) +
scale_y_continuous(expand = c(0,0), limits = c(0, 300), breaks = seq(0,300,50)) +
labs(title = 'Distribution of dog ratings awarded by @dog_rates on Twitter\n',
x = '\nRating (out of 10)', y = 'Frequency\n', caption = '\nData: scraped from @dog_rates using {rtweet} | @sarahe145 | #30DayChartChallenge') +
theme_minimal(base_size = 23) +
theme(plot.title = element_text(family = 'Playfair Display', hjust = 0.5),
plot.title.position = 'plot',
axis.title = element_text(family = 'Playfair Display', size = 22),
axis.text = element_text(family = 'Montserrat', color = '#AD343E', face = 'bold'),
plot.caption = element_text(family = 'Playfair Display', size =13),
plot.margin = margin(20,20,20,20)) +
coord_cartesian(clip = 'off')
setwd('~/Documents/30DayChartChallenge/day8')
ggplot(ratings, aes(x = num_rating)) +
geom_bar(fill = '#4CE0B3', col = '#AD343E', size = 1, alpha = 0.5) +
geom_label(data = label_df, aes(x = x, y = y, label = str_wrap(label, width = 15)),
col = '#AD343E', family = 'Montserrat', size = 7, label.size = NA, fill = alpha('white', 0.6)) +
geom_curve(aes(x = 10, xend = 12.5, y = 215, yend = 250), curvature = -0.25, size = 0.5, colour = "#AD343E", arrow = arrow(length = unit(0.025, "npc"))) +
geom_richtext(data = img_df, aes(x = x, y = y, label = label), fill = NA, label.color = NA) +
scale_x_continuous(breaks = seq(0, 15), limits = c(-1, 16)) +
scale_y_continuous(expand = c(0,0), limits = c(0, 300), breaks = seq(0,300,50)) +
labs(title = 'Distribution of dog ratings awarded by @dog_rates on Twitter\n',
x = '\nRating (out of 10)', y = 'Frequency\n', caption = '\nData: scraped from @dog_rates using {rtweet} | @sarahe145 | #30DayChartChallenge') +
theme_minimal(base_size = 23) +
theme(plot.title = element_text(family = 'Playfair Display', hjust = 0.5),
plot.title.position = 'plot',
axis.title = element_text(family = 'Playfair Display', size = 22),
axis.text = element_text(family = 'Montserrat', color = '#AD343E', face = 'bold'),
plot.caption = element_text(family = 'Playfair Display', size =13),
plot.margin = margin(20,20,20,20)) +
coord_cartesian(clip = 'off')
ggsave('08-animal.png', width = 16, height = 10)
nrow(ratings)
ratings[ratings$num_rating == 0, 'status_id']
# plot
ggplot(ratings, aes(x = num_rating)) +
geom_bar(fill = '#4CE0B3', col = '#AD343E', size = 1, alpha = 0.5) +
geom_label(data = label_df, aes(x = x, y = y, label = str_wrap(label, width = 15)),
col = '#AD343E', family = 'Montserrat', size = 7, label.size = NA, fill = alpha('white', 0.6)) +
geom_curve(aes(x = 10, xend = 12.5, y = 215, yend = 250), curvature = -0.25, size = 0.5, colour = "#AD343E", arrow = arrow(length = unit(0.025, "npc"))) +
geom_richtext(data = img_df, aes(x = x, y = y, label = label), fill = NA, label.color = NA) +
scale_x_continuous(breaks = seq(0, 15), limits = c(-1, 16)) +
scale_y_continuous(expand = c(0,0), limits = c(0, 300), breaks = seq(0,300,50)) +
labs(title = 'Distribution of dog ratings awarded by @dog_rates on Twitter\n',
x = '\nRating (out of 10)', y = 'Frequency\n', caption = '\nData: scraped from @dog_rates using {rtweet} | @sarahe145 | #30DayChartChallenge') +
theme_minimal(base_size = 23) +
theme(plot.title = element_text(family = 'Playfair Display', hjust = 0.5),
plot.title.position = 'plot',
axis.title = element_text(family = 'Playfair Display', size = 23),
axis.text = element_text(family = 'Montserrat', color = '#AD343E', face = 'bold'),
plot.caption = element_text(family = 'Playfair Display', size =15),
plot.margin = margin(20,20,20,20)) +
coord_cartesian(clip = 'off')
ggsave('08-animal.png', width = 16, height = 10)
# plot
ggplot(ratings, aes(x = num_rating)) +
geom_bar(fill = '#4CE0B3', col = '#AD343E', size = 1, alpha = 0.5) +
geom_label(data = label_df, aes(x = x, y = y, label = str_wrap(label, width = 15)),
col = '#AD343E', family = 'Montserrat', size = 7, label.size = NA, fill = alpha('white', 0.6)) +
geom_curve(aes(x = 10, xend = 12.5, y = 215, yend = 250), curvature = -0.25, size = 0.5, colour = "#AD343E", arrow = arrow(length = unit(0.025, "npc"))) +
geom_richtext(data = img_df, aes(x = x, y = y, label = label), fill = NA, label.color = NA) +
scale_x_continuous(breaks = seq(0, 15), limits = c(-1, 16)) +
scale_y_continuous(expand = c(0,0), limits = c(0, 300), breaks = seq(0,300,50)) +
labs(title = 'Distribution of dog ratings awarded by @dog_rates on Twitter\n',
x = '\nRating (out of 10)', y = 'Frequency\n', caption = '\nData: scraped from @dog_rates using {rtweet} | @sarahe145 | #30DayChartChallenge') +
theme_minimal(base_size = 23) +
theme(plot.title = element_text(family = 'Playfair Display', hjust = 0.5),
plot.title.position = 'plot',
axis.title = element_text(family = 'Playfair Display', size = 23),
axis.text = element_text(family = 'Montserrat', color = '#AD343E', face = 'bold'),
plot.caption = element_text(family = 'Playfair Display', size =15, hjust = 0.5),
plot.margin = margin(20,20,20,20)) +
coord_cartesian(clip = 'off')
ggsave('08-animal.png', width = 16, height = 10)
# plot
ggplot(ratings, aes(x = num_rating)) +
geom_bar(fill = '#4CE0B3', col = '#AD343E', size = 1, alpha = 0.5) +
geom_label(data = label_df, aes(x = x, y = y, label = str_wrap(label, width = 15)),
col = '#AD343E', family = 'Montserrat', size = 7, label.size = NA, fill = alpha('white', 0.6)) +
geom_curve(aes(x = 10, xend = 12.5, y = 215, yend = 250), curvature = -0.25, size = 0.5, colour = "#AD343E", arrow = arrow(length = unit(0.025, "npc"))) +
geom_richtext(data = img_df, aes(x = x, y = y, label = label), fill = NA, label.color = NA) +
scale_x_continuous(breaks = seq(0, 15), limits = c(-1, 16)) +
scale_y_continuous(expand = c(0,0), limits = c(0, 300), breaks = seq(0,300,50)) +
labs(title = 'Distribution of dog ratings awarded by @dog_rates on Twitter\n',
x = '\nRating (out of 10)    ', y = 'Frequency\n', caption = '\nData: scraped from @dog_rates using {rtweet} | @sarahe145 | #30DayChartChallenge') +
theme_minimal(base_size = 23) +
theme(plot.title = element_text(family = 'Playfair Display', hjust = 0.5),
plot.title.position = 'plot',
axis.title = element_text(family = 'Playfair Display', size = 23),
axis.text = element_text(family = 'Montserrat', color = '#AD343E', face = 'bold'),
plot.caption = element_text(family = 'Playfair Display', size =15, hjust = 0.5),
plot.margin = margin(20,20,20,20)) +
coord_cartesian(clip = 'off')
ggsave('08-animal.png', width = 16, height = 10)
# plot
ggplot(ratings, aes(x = num_rating)) +
geom_bar(fill = '#4CE0B3', col = '#AD343E', size = 1, alpha = 0.5) +
geom_label(data = label_df, aes(x = x, y = y, label = str_wrap(label, width = 15)),
col = '#AD343E', family = 'Montserrat', size = 7, label.size = NA, fill = alpha('white', 0.6)) +
geom_curve(aes(x = 10, xend = 12.5, y = 215, yend = 250), curvature = -0.25, size = 0.5, colour = "#AD343E", arrow = arrow(length = unit(0.025, "npc"))) +
geom_richtext(data = img_df, aes(x = x, y = y, label = label), fill = NA, label.color = NA) +
scale_x_continuous(breaks = seq(0, 15), limits = c(-1, 16)) +
scale_y_continuous(expand = c(0,0), limits = c(0, 300), breaks = seq(0,300,50)) +
labs(title = 'Distribution of dog ratings awarded by @dog_rates on Twitter\n',
x = '\nRating (out of 10)', y = 'Frequency\n', caption = '\nData: scraped from @dog_rates using {rtweet} | @sarahe145 | #30DayChartChallenge') +
theme_minimal(base_size = 23) +
theme(plot.title = element_text(family = 'Playfair Display', hjust = 0.5),
plot.title.position = 'plot',
axis.title = element_text(family = 'Playfair Display', size = 23),
axis.text = element_text(family = 'Montserrat', color = '#AD343E', face = 'bold'),
plot.caption = element_text(family = 'Playfair Display', size =15, hjust = 0.5),
plot.margin = margin(20,20,20,20)) +
coord_cartesian(clip = 'off')
ggsave('08-animal.png', width = 16, height = 10)
