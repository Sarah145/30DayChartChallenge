geom_bar(fill = '#508d52', colour = '#121213', width = 2) +
geom_text(data = df %>% group_by(winner) %>% tally(),
aes(x = n - 1, y = winner, label = n),
colour = '#ffffff', size = 8) +
scale_x_discrete(expand = c(0,1)) +
labs(title = 'WORDLE WINS') +
theme_void(base_size = 20) +
theme(plot.background = element_rect(colour = '#121213', fill = '#121213'),
panel.background = element_rect(colour = '#121213', fill = '#121213'),
plot.margin = margin(l = 10, r = 5),
axis.text.y = element_text(colour = '#ffffff'),
plot.title = element_text(colour = '#ffffff', hjust = 0.5))
ggplot(df, aes(y = winner)) +
geom_bar(fill = '#508d52', colour = '#121213', size = 2) +
geom_text(data = df %>% group_by(winner) %>% tally(),
aes(x = n - 1, y = winner, label = n),
colour = '#ffffff', size = 8) +
scale_x_discrete(expand = c(0,1)) +
labs(title = 'WORDLE WINS') +
theme_void(base_size = 20) +
theme(plot.background = element_rect(colour = '#121213', fill = '#121213'),
panel.background = element_rect(colour = '#121213', fill = '#121213'),
plot.margin = margin(l = 10, r = 5),
axis.text.y = element_text(colour = '#ffffff'),
plot.title = element_text(colour = '#ffffff', hjust = 0.5))
ggplot(df, aes(y = winner)) +
geom_bar(fill = '#508d52', colour = '#121213', size = 4) +
geom_text(data = df %>% group_by(winner) %>% tally(),
aes(x = n - 1, y = winner, label = n),
colour = '#ffffff', size = 8) +
scale_x_discrete(expand = c(0,1)) +
labs(title = 'WORDLE WINS') +
theme_void(base_size = 20) +
theme(plot.background = element_rect(colour = '#121213', fill = '#121213'),
panel.background = element_rect(colour = '#121213', fill = '#121213'),
plot.margin = margin(l = 10, r = 5),
axis.text.y = element_text(colour = '#ffffff'),
plot.title = element_text(colour = '#ffffff', hjust = 0.5))
ggplot(df, aes(y = winner)) +
geom_bar(fill = '#508d52', colour = '#121213', size = 4) +
geom_text(data = df %>% group_by(winner) %>% tally(),
aes(x = n - 1.2, y = winner, label = n),
colour = '#ffffff', size = 8) +
scale_x_discrete(expand = c(0,0.5)) +
labs(title = 'WORDLE WINS') +
theme_void(base_size = 20) +
theme(plot.background = element_rect(colour = '#121213', fill = '#121213'),
panel.background = element_rect(colour = '#121213', fill = '#121213'),
plot.margin = margin(l = 10, r = 5),
axis.text.y = element_text(colour = '#ffffff'),
plot.title = element_text(colour = '#ffffff', hjust = 0.5))
library(tidyverse)
library(circlize)
ints <- readRDS('~/Documents/Project/my_first_paper_<3/annotated_interactions_updated.Rds')
ints <- ints %>% mutate(interacting_cell = case_when(
interacting_cell == 'HSCMPP' ~ 'HSC.MPP',
str_detect(interacting_cell, 'CD4') ~ str_replace(interacting_cell, 'CD4', 'CD4.'),
str_detect(interacting_cell, 'CD8') ~ str_replace(interacting_cell, 'CD8', 'CD8.'),
str_detect(interacting_cell, 'CD14') ~ str_replace(interacting_cell, 'CD14', 'CD14.'),
str_detect(interacting_cell, 'CD16') ~ str_replace(interacting_cell, 'CD16', 'CD16.'),
interacting_cell == 'PreB' ~ 'Pre.B',
interacting_cell == 'LateEryth' ~ 'Late.Eryth',
T ~ interacting_cell
),
source = case_when(
source == 'HSCMPP' ~ 'HSC.MPP',
str_detect(source, 'CD4') ~ str_replace(source, 'CD4', 'CD4.'),
str_detect(source, 'CD8') ~ str_replace(source, 'CD8', 'CD8.'),
str_detect(source, 'CD14') ~ str_replace(source, 'CD14', 'CD14.'),
str_detect(source, 'CD16') ~ str_replace(source, 'CD16', 'CD16.'),
source == 'PreB' ~ 'Pre.B',
source == 'LateEryth' ~ 'Late.Eryth',
T ~ source
),
target = case_when(
target == 'HSCMPP' ~ 'HSC.MPP',
str_detect(target, 'CD4') ~ str_replace(target, 'CD4', 'CD4.'),
str_detect(target, 'CD8') ~ str_replace(target, 'CD8', 'CD8.'),
str_detect(target, 'CD14') ~ str_replace(target, 'CD14', 'CD14.'),
str_detect(target, 'CD16') ~ str_replace(target, 'CD16', 'CD16.'),
target == 'PreB' ~ 'Pre.B',
target == 'LateEryth' ~ 'Late.Eryth',
T ~ target
))
cell_cols <- readRDS('~/Documents/Project/final_ct_cols.Rds')
healthy_counts <- ints %>% filter(timepoint != 'AML (Diagnosis) only') %>%
group_by(source, target) %>% tally() %>% pivot_wider(source, names_from = 'target', values_from = 'n', values_fill = 0)
healthy_mat <- as.matrix(healthy_counts[,2:ncol(healthy_counts)])
rownames(healthy_mat) <- healthy_counts$source
chordDiagram(healthy_mat, directional = 1, grid.col = cell_cols, transparency = 0.5,
big.gap = 10, small.gap = 1)
d0_counts <- ints %>% filter(timepoint != 'Healthy only') %>%
group_by(source, target) %>% tally() %>% pivot_wider(source, names_from = 'target', values_from = 'n', values_fill = 0)
d0_mat <- as.matrix(d0_counts[,2:ncol(d0_counts)])
rownames(d0_mat) <- d0_counts$source
gap = calc_gap(d0_mat, healthy_mat, big.gap = 10, small.gap = 1)
grp <- ifelse(names(cell_cols) == 'HSC.MPP', 1, 2)
names(grp) <- names(cell_cols)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
big.gap = 10, small.gap = 1)
title(paste0('AML (n = ', sum(d0_mat), ')'))
circos.clear()
circos.par(start.degree = 150)
chordDiagram(healthy_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
big.gap = gap, small.gap = 1)
title(paste0('Healthy (n = ', sum(healthy_mat), ')'))
circos.clear()
png('~/Documents/Project/ResearchDay22/d0_circos.png', width = 1000, height = 1000)
par(cex = 1.2)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
big.gap = 10, small.gap = 1)
title(paste0('AML (n = ', sum(d0_mat), ')\n'))
circos.clear()
dev.off()
png('~/Documents/Project/ResearchDay22/d0_circos.png', width = 1000, height = 1000)
par(cex = 0.5)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
big.gap = 10, small.gap = 1)
title(paste0('AML (n = ', sum(d0_mat), ')\n'))
circos.clear()
dev.off()
png('~/Documents/Project/ResearchDay22/d0_circos.png', width = 1000, height = 1000)
par(cex = 2)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
big.gap = 10, small.gap = 1)
title(paste0('AML (n = ', sum(d0_mat), ')\n'))
circos.clear()
dev.off()
png('~/Documents/Project/ResearchDay22/d0_circos.png', width = 1000, height = 1000)
par(cex = 2)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
big.gap = 10, small.gap = 1)
title(paste0('\nAML (n = ', sum(d0_mat), ')\n'))
circos.clear()
dev.off()
png('~/Documents/Project/ResearchDay22/d0_circos.png', width = 1000, height = 1000)
par(cex = 3)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
big.gap = 10, small.gap = 1)
title(paste0('\nAML (n = ', sum(d0_mat), ')\n'))
circos.clear()
dev.off()
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.145)),
big.gap = 10, small.gap = 1)
circos.clear()
png('~/Documents/Project/ResearchDay22/d0_circos.png', width = 1000, height = 1000)
par(cex = 3)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.145)),
big.gap = 10, small.gap = 1)
title(paste0('\nAML (n = ', sum(d0_mat), ')\n'))
circos.clear()
dev.off()
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.5)),
big.gap = 10, small.gap = 1)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.5), list(track.height = 0.1)),
big.gap = 10, small.gap = 1)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.1), list(track.height = 0.1)),
big.gap = 10, small.gap = 1)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.1), list(track.height = 0.3)),
big.gap = 10, small.gap = 1)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.01), list(track.height = 0.3)),
big.gap = 10, small.gap = 1)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.001), list(track.height = 0.3)),
big.gap = 10, small.gap = 1)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.001), list(track.height = 0.5)),
big.gap = 10, small.gap = 1)
png('~/Documents/Project/ResearchDay22/d0_circos.png', width = 1000, height = 1000)
par(cex = 3)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.001), list(track.height = 0.5)),
big.gap = 10, small.gap = 1)
title(paste0('\nAML (n = ', sum(d0_mat), ')\n'))
circos.clear()
dev.off()
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.001), list(track.height = 0.01)),
big.gap = 10, small.gap = 1)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.005), list(track.height = 0.01)),
big.gap = 10, small.gap = 1)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.0005), list(track.height = 0.01)),
big.gap = 10, small.gap = 1)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.0005)),
big.gap = 10, small.gap = 1)
circos.clear()
png('~/Documents/Project/ResearchDay22/d0_circos.png', width = 1000, height = 1000)
par(cex = 3)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.0005)),
big.gap = 10, small.gap = 1)
title(paste0('\nAML (n = ', sum(d0_mat), ')\n'))
circos.clear()
dev.off()
png('~/Documents/Project/ResearchDay22/healthy_circos.png', width = 1000, height = 1000)
par(cex = 3)
circos.par(start.degree = 150)
chordDiagram(healthy_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.5, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.0005)),
big.gap = gap, small.gap = 1)
title(paste0('\nHealthy (n = ', sum(healthy_mat), ')\n'))
circos.clear()
dev.off()
chordDiagram(healthy_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.3, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.0005)),
big.gap = gap, small.gap = 1)
?chordDiagram
png('~/Documents/Project/ResearchDay22/d0_circos.png', width = 1000, height = 1000)
par(cex = 3)
circos.par(start.degree = 172)
chordDiagram(d0_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.3, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.0005)),
big.gap = 10, small.gap = 1)
title(paste0('\nAML (n = ', sum(d0_mat), ')\n'))
circos.clear()
dev.off()
png('~/Documents/Project/ResearchDay22/healthy_circos.png', width = 1000, height = 1000)
par(cex = 3)
circos.par(start.degree = 150)
chordDiagram(healthy_mat, group = grp, directional = 1, grid.col = cell_cols, transparency = 0.3, diffHeight = 0.005, annotationTrack = c('grid'),
direction.type = c("diffHeight", 'arrows'), link.arr.type = "big.arrow",
preAllocateTracks = list(list(track.height = 0.0005)),
big.gap = gap, small.gap = 1)
title(paste0('\nHealthy (n = ', sum(healthy_mat), ')\n'))
circos.clear()
dev.off()
library(tidyverse)
library(lubridate)
library(emojifont)
df <- data.frame(date = seq.Date(from = as.Date('2021-04-01'), to = as.Date('2021-04-30'), by = 'day')) %>%
mutate(plot = day(date) %in% c(1,2,4,5,6,7,8,10,12,13,16))
dfPlot <- df %>%
mutate(dateCol = ymd(date),
weekday = wday(dateCol, label = T, week_start = 1), # can put week_start = 1 to start week on Monday
month = month(dateCol, label = T, abbr = F),
date = day(dateCol),
week = week(dateCol))
df <- data.frame(date = seq.Date(from = as.Date('2021-04-01'), to = as.Date('2021-04-30'), by = 'day')) %>%
mutate(plot = day(date) %in% c(1,2,4,5,6,7,8,10,12,13,16),
dateCol = ymd(date),
weekday = wday(dateCol, label = T, week_start = 1),
date = day(dateCol),
monthweek = c(rep(1, 4), rep(seq(2, 4), each = 7), rep(5, 5)))
ggplot(df, aes(x = weekday, y = -monthweek)) +
geom_tile(fill='transparent', col = '#ffffff', size = 1) +
geom_text(data = df %>% filter(plot == T), col = '#FFE8C2', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 17, alpha = 1) +
geom_text(data = df %>% filter(plot == T), col = '#FFC15E', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 15)  +
geom_text(label = as.character(df$date), aes(col = plot), show.legend = F, size = 6) +
scale_colour_manual(values = c('#ffffff', '#000000')) +
labs(title = 'My contributions to #30DayChartChallenge in 2021',
subtitle = paste0(fontawesome('fa-star'), paste0(rep(' ', 55), collapse = ' '), fontawesome('fa-star')),
caption = '\n@sarahe145 | #30DayChartChallenge') +
theme_void(base_size = 16) +
theme(
axis.text.x = element_text(colour = '#ffffff'),
plot.title = element_text(colour = '#ffffff', hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, family = 'fontawesome-webfont',  margin = margin(t = -17, b = 10), colour = '#FFC15E'),
plot.caption = element_text(colour = 'grey95', size = 12),
panel.background = element_rect(fill = 'grey10', color='transparent'),
plot.background = element_rect(fill = 'grey10', color='transparent'),
plot.margin = margin(10,10,10,10)) +
coord_cartesian(clip = 'off')
df1 <- data.frame(date = seq.Date(from = as.Date('2022-04-01'), to = as.Date('2022-04-30'), by = 'day')) %>%
mutate(plot = day(date) %in% c(1),
dateCol = ymd(date),
weekday = wday(dateCol, label = T, week_start = 1),
date = day(dateCol),
monthweek = c(rep(1, 3), rep(seq(2, 4), each = 7), rep(5, 6)))
ggplot(df1, aes(x = weekday, y = -monthweek)) +
geom_tile(fill='transparent', col = '#ffffff', size = 1) +
geom_text(data = df1 %>% filter(plot == T), col = '#FFE8C2', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 17, alpha = 1) +
geom_text(data = df1 %>% filter(plot == T), col = '#FFC15E', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 15)  +
geom_text(label = as.character(df1$date), aes(col = plot), show.legend = F, size = 6) +
scale_colour_manual(values = c('#ffffff', '#000000')) +
labs(title = 'My contributions to #30DayChartChallenge in 2022',
subtitle = paste0(fontawesome('fa-star'), paste0(rep(' ', 55), collapse = ' '), fontawesome('fa-star')),
caption = '\n@sarahe145 | #30DayChartChallenge') +
theme_void(base_size = 16) +
theme(
axis.text.x = element_text(colour = '#ffffff'),
plot.title = element_text(colour = '#ffffff', hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, family = 'fontawesome-webfont',  margin = margin(t = -17, b = 10), colour = '#FFC15E'),
plot.caption = element_text(colour = 'grey95', size = 12),
panel.background = element_rect(fill = 'grey10', color='transparent'),
plot.background = element_rect(fill = 'grey10', color='transparent'),
plot.margin = margin(10,10,10,10)) +
coord_cartesian(clip = 'off')
showtext::showtext_opts(dpi = 320)
setwd('~/Documents/30DayChartChallenge/2022/day1/')
ggplot(df, aes(x = weekday, y = -monthweek)) +
geom_tile(fill='transparent', col = '#ffffff', size = 1) +
geom_text(data = df %>% filter(plot == T), col = '#FFE8C2', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 17, alpha = 1) +
geom_text(data = df %>% filter(plot == T), col = '#FFC15E', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 15)  +
geom_text(label = as.character(df$date), aes(col = plot), show.legend = F, size = 6) +
scale_colour_manual(values = c('#ffffff', '#000000')) +
labs(title = 'My contributions to #30DayChartChallenge in 2021',
subtitle = paste0(fontawesome('fa-star'), paste0(rep(' ', 55), collapse = ' '), fontawesome('fa-star')),
caption = '\n@sarahe145 | #30DayChartChallenge') +
theme_void(base_size = 16) +
theme(
axis.text.x = element_text(colour = '#ffffff'),
plot.title = element_text(colour = '#ffffff', hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, family = 'fontawesome-webfont',  margin = margin(t = -17, b = 10), colour = '#FFC15E'),
plot.caption = element_text(colour = 'grey95', size = 12),
panel.background = element_rect(fill = 'grey10', color='transparent'),
plot.background = element_rect(fill = 'grey10', color='transparent'),
plot.margin = margin(10,10,10,10)) +
coord_cartesian(clip = 'off')
ggplot(df, aes(x = weekday, y = -monthweek)) +
geom_tile(fill='transparent', col = '#ffffff', size = 1) +
geom_text(data = df %>% filter(plot == T), col = '#FFE8C2', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 17, alpha = 1) +
geom_text(data = df %>% filter(plot == T), col = '#FFC15E', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 15)  +
geom_text(label = as.character(df$date), aes(col = plot), show.legend = F, size = 6) +
scale_colour_manual(values = c('#ffffff', '#000000')) +
labs(title = 'My contributions to #30DayChartChallenge in 2021',
subtitle = paste0(fontawesome('fa-star'), paste0(rep(' ', 55), collapse = ' '), fontawesome('fa-star')),
caption = '\n@sarahe145 | #30DayChartChallenge') +
theme_void(base_size = 16) +
theme(
axis.text.x = element_text(colour = '#ffffff'),
plot.title = element_text(colour = '#ffffff', hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, family = 'fontawesome-webfont',  margin = margin(t = -17, b = 10), colour = '#FFC15E'),
plot.caption = element_text(colour = 'grey95', size = 12),
panel.background = element_rect(fill = 'grey10', color='transparent'),
plot.background = element_rect(fill = 'grey10', color='transparent'),
plot.margin = margin(10,10,10,10)) +
coord_cartesian(clip = 'off')
ggsave('01-part-to-whole.png', width = 6.9, height = 5.5, dpi = 320)
df1 <- data.frame(date = seq.Date(from = as.Date('2022-04-01'), to = as.Date('2022-04-30'), by = 'day')) %>%
mutate(plot = day(date) %in% c(1),
dateCol = ymd(date),
weekday = wday(dateCol, label = T, week_start = 1),
date = day(dateCol),
monthweek = c(rep(1, 3), rep(seq(2, 4), each = 7), rep(5, 6)))
ggplot(df1, aes(x = weekday, y = -monthweek)) +
geom_tile(fill='transparent', col = '#ffffff', size = 1) +
geom_text(data = df1 %>% filter(plot == T), col = '#FFE8C2', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 17, alpha = 1) +
geom_text(data = df1 %>% filter(plot == T), col = '#FFC15E', label = fontawesome('fa-star'), family = 'fontawesome-webfont', size = 15)  +
geom_text(label = as.character(df1$date), aes(col = plot), show.legend = F, size = 6) +
scale_colour_manual(values = c('#ffffff', '#000000')) +
labs(title = 'My contributions to #30DayChartChallenge in 2022',
subtitle = paste0(fontawesome('fa-star'), paste0(rep(' ', 55), collapse = ' '), fontawesome('fa-star')),
caption = '\n@sarahe145 | #30DayChartChallenge') +
theme_void(base_size = 16) +
theme(
axis.text.x = element_text(colour = '#ffffff'),
plot.title = element_text(colour = '#ffffff', hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, family = 'fontawesome-webfont',  margin = margin(t = -17, b = 10), colour = '#FFC15E'),
plot.caption = element_text(colour = 'grey95', size = 12),
panel.background = element_rect(fill = 'grey10', color='transparent'),
plot.background = element_rect(fill = 'grey10', color='transparent'),
plot.margin = margin(10,10,10,10)) +
coord_cartesian(clip = 'off')
ggsave('01-part-to-whole_1.png', width = 6.9, height = 5.5, dpi = 320)
library(ggtext)
library(patchwork)
library(cowplot)
library(gridExtra)
library(paletteer)
## cell proportions
df <- read.csv('~/Documents/Project/bone_marrow_analysis/data/integrated_umap3.csv', sep = '\t', row.names = 1) %>%
filter(sample %ni% c('CD34_D2T1', 'CD34_D3T1', 'Normal_sorted_170531', 'Normal_sorted_170607', 'BM5-34p', 'BM5-34p38n')) %>% # remove sorted samples
mutate(timepoint = case_when(
tp == 'Dia' ~ 'AML (diagnosis)',
tp == 'Hea' ~ 'Healthy',
tp == 'Rel' ~ 'AML (relapse)',
tp == 'TRT' ~ 'AML (post-treatment)',
tp == 'MRD' ~ 'AML (post-treatment)'
))
cell_props <- readRDS('~/Documents/Project/bone_marrow_analysis/propeller_results.Rds')
cell_props <-  cell_props %>%
mutate(timepoint = case_when(
tp == 'AML.Diagnosis' ~ 'AML (diagnosis)',
tp == 'Healthy' ~ 'Healthy',
tp == 'AML.Relapse' ~ 'AML (relapse)',
tp == 'AML.Posttreatment' ~ 'AML (post-treatment)'
),
TP1 = case_when(
TP1 == 'AML.Diagnosis' ~ 'AML (diagnosis)',
TP1 == 'Healthy' ~ 'Healthy',
TP1 == 'AML.Relapse' ~ 'AML (relapse)',
TP1 == 'AML.Posttreatment' ~ 'AML (post-treatment)'
),
TP2 = case_when(
TP2 == 'AML.Diagnosis' ~ 'AML (diagnosis)',
TP2 == 'Healthy' ~ 'Healthy',
TP2 == 'AML.Relapse' ~ 'AML (relapse)',
TP2 == 'AML.Posttreatment' ~ 'AML (post-treatment)'
))
col_pals <- readRDS('~/Documents/Project/bone_marrow_analysis/plot_scripts/colour_palettes.Rds')
cell_cols <- col_pals$celltype
cell_props$celltype <- factor(cell_props$BaselineProp.clusters, levels = names(cell_cols))
cell_props$timepoint <- factor(cell_props$timepoint, levels = c('Healthy', 'AML (diagnosis)', 'AML (post-treatment)', 'AML (relapse)'))
cell_props$TP1 <- factor(cell_props$TP1, levels = c('Healthy', 'AML (diagnosis)', 'AML (post-treatment)', 'AML (relapse)'))
cell_props$TP2 <- factor(cell_props$TP2, levels = c('Healthy', 'AML (diagnosis)', 'AML (post-treatment)', 'AML (relapse)'))
df$celltype <- factor(df$celltype_final, levels = names(cell_cols))
plot_df <- df %>% group_by(sample, timepoint, celltype) %>% tally() %>%
ungroup() %>% group_by(sample) %>% mutate(per = n/sum(n))
compars <- c('Healthy AML (diagnosis)', 'Healthy AML (post-treatment)', 'Healthy AML (relapse)', 'AML (diagnosis) AML (post-treatment)', 'AML (diagnosis) AML (relapse)', 'AML (post-treatment) AML (relapse)')
cols <- colorRampPalette(c("#FF8D75FF", "#F9594AFF", "#D92235FF", "#A30034FF", "#6D0026FF"))
plot_df$timepoint <- factor(plot_df$timepoint, levels = levels(cell_props$timepoint))
plot_list <- list()
for(i in levels(cell_props$celltype)){
sub <- cell_props %>% filter(celltype == i)
plot_df_sub <- plot_df %>% filter(celltype == i)
bar_plot <-
ggplot(sub %>% select(timepoint, celltype, prop) %>% mutate(prop = round(prop, 5)) %>% distinct(),
aes(x = timepoint, y = prop)) +
geom_jitter(data = plot_df_sub, aes(x = timepoint, y = per, col = NULL, fill = NULL), size = 2, alpha = 0.5, col = 'gray60', position = position_jitter(width = 0.1), show.legend = F) +
geom_point(show.legend = F, col = '#3B429F', pch = '-', size = 30) +
geom_segment(x = 1.25, xend = 3.75, y = max(plot_df_sub$per) * 1.1, yend = max(plot_df_sub$per) * 1.1) +
scale_fill_manual(values = cell_cols) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
scale_y_continuous(expand = c(0,0), limits = c(0, max(plot_df_sub$per) * 1.1)) +
facet_wrap(~celltype, scales = 'free', labeller = labeller(celltype = labs)) +
labs(y = 'Proportion', x = NULL) +
theme_classic(base_size = 18) +
theme(axis.text = element_text(colour = 'black'),
axis.text.x = element_text(margin = margin(t = 8, b = -3), vjust = 0.5),
axis.title.y = element_blank(),
axis.ticks = element_line(colour = 'gray20'),
strip.background = element_blank(),
strip.text = element_text(colour = 'black', size = 17, face = 'bold'),
plot.margin = margin(2, -5, 4, 0)
)
d <- data.frame()
for(j in levels(sub$TP1)){
for(k in levels(sub$TP1)){
sub_sub <- sub %>% filter((TP1 == j & TP2 == k) | (TP2 == j & TP1 == k))
enriched <- F
if(nrow(sub_sub) > 0){
if(j == unique(sub_sub$TP1) & k == unique(sub_sub$TP2) & unique(sub_sub$TP1_greater)){enriched <- T}
if(k == unique(sub_sub$TP1) & j == unique(sub_sub$TP2) & unique(sub_sub$TP1_greater) == F){enriched <- T}}
dd <- data.frame(TP1 = j, TP2 = k, enr = enriched, fdr = ifelse(nrow(sub_sub) > 0, unique(sub_sub$p_adj), NA), celltype = i)
d <- rbind(d, dd)
}
}
tile_plot <-
ggplot(d %>% mutate(compar = paste(TP1, TP2)),
aes(x = TP1, xend = TP2, y = compar, yend = compar)) +
geom_segment(col = 'gray80', aes(col = NULL), size = 2.6, show.legend = F) +
geom_segment(data = d %>% mutate(compar = paste(TP1, TP2)) %>% filter(fdr <= 0.05), aes(col = -log10(fdr)), size = 2.6, show.legend = F) +
scale_x_discrete(limits = levels(cell_props$TP1), position = 'top') +
scale_y_discrete(limits = rev(compars)) +
scale_colour_gradientn(colors = cols(100), limits = c(1,15.87)) +
facet_wrap(~celltype, scales = 'free') +
theme_minimal(base_size = 14) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.line = element_line(colour = 'white'),
panel.background = element_rect(colour = 'white', fill = 'transparent', size = 2),
panel.ontop = T,
panel.grid = element_blank(),
strip.text = element_blank(),
plot.margin = margin(2, -5, 2, 0),
axis.text.x.top = element_blank())
# if(i %in% c('Plasma', 'HSC.MPP', 'GMP', 'pDC', 'CD8.M')){
#   bar_plot <- bar_plot + theme(axis.title.y = element_text(angle = 90, hjust = 0.5))
# }
comb_plot <- bar_plot/tile_plot + plot_layout(heights = c(1.2, 0.6))
plot_list[[i]] <- eval(substitute(comb_plot))
}
names(plot_list)
prog <- plot_grid(plotlist = plot_list[c('HSC.MPP', 'CLP')], align = 'hv', nrow = 1)
ggdraw(g) +
theme(plot.background = element_rect(fill="white", color = NA))
ggdraw(prog) +
theme(plot.background = element_rect(fill="white", color = NA))
